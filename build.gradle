/*
 * Copyright (c) 2022 University of California, Riverside.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
import net.ltgt.gradle.errorprone.CheckSeverity

plugins{
    id "net.ltgt.errorprone" version "2.0.1" apply false
    id "com.vanniktech.maven.publish" version "0.22.0" apply false
    id("com.diffplug.gradle.spotless") version "6.25.0" apply false
}

allprojects {
    group = GROUP
    version = VERSION_NAME
    tasks.withType(Test) {
        maxParallelForks = Runtime.getRuntime().availableProcessors()
        systemProperties = [
                'junit.jupiter.execution.parallel.enabled': 'true',
                'junit.jupiter.execution.parallel.mode.default': 'concurrent'
        ]
    }
}

apply from: "gradle/dependencies.gradle"

subprojects { proj ->

    proj.apply plugin: "java"
    proj.apply plugin: "net.ltgt.errorprone"
    proj.apply plugin: "com.diffplug.spotless"

    proj.dependencies {
        errorprone deps.build.errorProneCore
        errorproneJavac deps.build.errorProneJavac
        if(proj.name != "ban-mutable-static"){
            annotationProcessor project(":checks:ban-mutable-static")
        }
        testImplementation deps.test.junitapi
        testRuntimeOnly deps.test.junitengine
    }

    proj.tasks.withType(JavaCompile) {
        if (!name.toLowerCase().contains("test")) {
            options.errorprone {
                check("StringSplitter", CheckSeverity.OFF)
                check("WildcardImport", CheckSeverity.ERROR)
                check("MissingBraces", CheckSeverity.ERROR)
                if (project.name != "ban-mutable-static") {
                    check("BanMutableStatic", CheckSeverity.ERROR)
                }
            }
        }
        options.fork = true
    }

    repositories {
        mavenCentral()
        google()
    }

    sourceCompatibility = 1.11
    targetCompatibility = 1.11

    spotless {
        java {
            googleJavaFormat('1.24.0')
        }
    }
}
